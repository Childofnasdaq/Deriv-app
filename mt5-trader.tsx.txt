'use client'

import { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { AlertCircle } from "lucide-react"

// This is a mock function. In a real application, you'd need to implement actual MT5 connectivity.
const connectToMT5 = async (login: string, password: string, server: string) => {
  // Simulate connection delay
  await new Promise(resolve => setTimeout(resolve, 2000))
  // In a real app, this would return a connection object or throw an error
  return { status: 'connected', account: login }
}

// This is a mock function. In a real application, you'd implement actual trade opening logic.
const openTrade = async (symbol: string, volume: number, type: 'buy' | 'sell') => {
  // Simulate trade delay
  await new Promise(resolve => setTimeout(resolve, 1000))
  // In a real app, this would return trade details or throw an error
  return { ticket: Math.floor(Math.random() * 1000000), symbol, volume, type }
}

export default function MT5Trader() {
  const [isConnected, setIsConnected] = useState(false)
  const [account, setAccount] = useState('')
  const [login, setLogin] = useState('')
  const [password, setPassword] = useState('')
  const [server, setServer] = useState('')
  const [symbol, setSymbol] = useState('EURUSD')
  const [volume, setVolume] = useState(0.01)
  const [logs, setLogs] = useState<string[]>([])
  const [isTrading, setIsTrading] = useState(false)

  const addLog = (message: string) => {
    setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`])
  }

  const handleConnect = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      addLog('Connecting to MT5...')
      const result = await connectToMT5(login, password, server)
      setIsConnected(true)
      setAccount(result.account)
      addLog(`Connected to MT5 account: ${result.account}`)
    } catch (error) {
      addLog(`Connection failed: ${error.message}`)
    }
  }

  const handleTrade = async () => {
    if (!isConnected) {
      addLog('Not connected to MT5. Please connect first.')
      return
    }
    setIsTrading(true)
    addLog('Starting automated trading...')
  }

  const stopTrading = () => {
    setIsTrading(false)
    addLog('Automated trading stopped.')
  }

  useEffect(() => {
    let interval: NodeJS.Timeout
    if (isTrading) {
      interval = setInterval(async () => {
        try {
          const tradeType = Math.random() > 0.5 ? 'buy' : 'sell'
          addLog(`Attempting to open ${tradeType} trade for ${symbol}...`)
          const result = await openTrade(symbol, volume, tradeType)
          addLog(`Trade opened: Ticket ${result.ticket}, ${result.type} ${result.symbol} ${result.volume} lots`)
        } catch (error) {
          addLog(`Trade failed: ${error.message}`)
        }
      }, 5000) // Try to open a trade every 5 seconds
    }
    return () => clearInterval(interval)
  }, [isTrading, symbol, volume])

  return (
    <div className="container mx-auto p-4">
      <Card className="mb-4">
        <CardHeader>
          <CardTitle>MT5 Trader</CardTitle>
          <CardDescription>Connect to your MT5 account and start automated trading</CardDescription>
        </CardHeader>
        <CardContent>
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Warning</AlertTitle>
            <AlertDescription>
              Automated trading carries significant risks. Use at your own risk and always monitor your trades.
            </AlertDescription>
          </Alert>
          {!isConnected ? (
            <form onSubmit={handleConnect} className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="login">Login</Label>
                <Input id="login" value={login} onChange={(e) => setLogin(e.target.value)} required />
              </div>
              <div className="space-y-2">
                <Label htmlFor="password">Password</Label>
                <Input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required />
              </div>
              <div className="space-y-2">
                <Label htmlFor="server">Server</Label>
                <Input id="server" value={server} onChange={(e) => setServer(e.target.value)} required />
              </div>
              <Button type="submit">Connect to MT5</Button>
            </form>
          ) : (
            <div className="space-y-4">
              <p>Connected to account: {account}</p>
              <div className="space-y-2">
                <Label htmlFor="symbol">Symbol</Label>
                <Input id="symbol" value={symbol} onChange={(e) => setSymbol(e.target.value)} />
              </div>
              <div className="space-y-2">
                <Label htmlFor="volume">Volume (lots)</Label>
                <Input id="volume" type="number" step="0.01" min="0.01" value={volume} onChange={(e) => setVolume(parseFloat(e.target.value))} />
              </div>
              <Button onClick={isTrading ? stopTrading : handleTrade}>
                {isTrading ? 'Stop Trading' : 'Start Automated Trading'}
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Trading Logs</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-64 overflow-y-auto bg-gray-100 p-2 rounded">
            {logs.map((log, index) => (
              <p key={index} className="text-sm">{log}</p>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}